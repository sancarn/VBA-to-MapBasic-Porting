'C# Type Defs:
'From https://msdn.microsoft.com/en-us/library/cc230394.aspx
'Long = 32-Bit Signed Integer
'DWORD = 32-Bit unsigned integer
'ULong_Ptr = Unsigned long for pointers.
'TCHAR = 16-Bit Unicode Character



'typedef struct tagPROCESSENTRY32 {
'  DWORD     dwSize;
'  DWORD     cntUsage;
'  DWORD     th32ProcessID;
'  ULONG_PTR th32DefaultHeapID;
'  DWORD     th32ModuleID;
'  DWORD     cntThreads;
'  DWORD     th32ParentProcessID;
'  LONG      pcPriClassBase;
'  DWORD     dwFlags;
'  TCHAR     szExeFile[MAX_PATH];		'	MAX_PATH = 260; An array of 260 TCHARS - A short string
'} PROCESSENTRY32, *PPROCESSENTRY32;

Type PROCESSENTRY32
    dwSize As Integer
    cntUsage As Integer
    th32ProcessID As Integer
    th32DefaultHeapID As IntPtr
    th32ModuleID As Integer
    cntThreads As Integer
    th32ParentProcessID As Integer
    pcPriClassBase As Integer
    dwFlags As Integer
    szexeFile As String
End Type

'-------------------------------------------------------

'BOOL WINAPI Process32First( _In_ HANDLE hSnapshot, _Inout_ LPProcessEntry32 lppe);
Declare Function ProcessFirst Lib "kernel32.dll" Alias "Process32First" (ByVal hSnapshot As IntPtr, uProcess As PROCESSENTRY32) As Logical

'BOOL WINAPI Process32Next(_In_ HANDLE hSnapshot, _Out_ LPPROCESSENTRY32 lppe);
Declare Function ProcessNext Lib "kernel32.dll" Alias "Process32Next" (ByVal hSnapshot As IntPtr, uProcess As PROCESSENTRY32) As Logical

'HANDLE WINAPI CreateToolhelp32Snapshot(_In_ DWORD dwFlags, _In_ DWORD th32ProcessID); HANDLE == 'IntPtr'; DWORD == 'Integer'
Declare Function CreateToolhelpSnapshot Lib "kernel32.dll" Alias "CreateToolhelp32Snapshot" ( ByVal lFlags As Integer, byval lProcessID As Integer) As IntPtr

'BOOL WINAPI CloseHandle(_In_ HANDLE hObject);
Declare Function CloseHandle Lib "kernel32.dll" (ByVal hObject As IntPtr) As Integer

'User defined function
Declare Function RunningProcess(ByVal NameProcess As String) As Logical

Print RunningProcess("explorer.exe")

Function RunningProcess(ByVal NameProcess As String) As Logical
    'E.G. NameProcess = "explorer.exe"
    
    Define TH32CS_SNAPPROCESS 2
    
    Dim uProcess As PROCESSENTRY32
    Dim RProcessFound As Logical
    Dim hSnapshot As IntPtr
    Dim SzExename As String
    Dim i As SmallInt
    Dim WinDirEnv As String
         
        If NameProcess <> "" Then
           uProcess.dwSize = 296
           
           'Takes a snapshot of the specified processes, as well as the heaps, modules, and threads used by these processes
           'https://msdn.microsoft.com/en-us/library/windows/desktop/ms682489(v=vs.85).aspx
           hSnapshot = CreateToolhelpSnapshot(TH32CS_SNAPPROCESS, 0)
           Print hSnapshot
           
           'Get the first process off the heap
           'RProcessFound is simply a Logical - 'Was a process found?'
           'hSnapshot is the handle to the heap
           'uProcess is the process variable type
           RProcessFound = ProcessFirst(hSnapshot, uProcess)
			 
           Do
				'DEBUG:
				print uProcess.szexeFile
				
             'find character(0) in returned process executable
             i = InStr(1, uProcess.szexeFile, Chr$(0))
             
             'Trim to get process name
             SzExename = LCase$(Left$(uProcess.szexeFile, i - 1))
             
             'Get path of "WINDOWS" folder i.e. "C:\WINDOWS"
             WinDirEnv = GetFolderPath$(36) + "\"
             WinDirEnv = LCase$(WinDirEnv)
             
             'if name of process = szexeFile of uProcess then the process is running
             If Right$(SzExename, Len(NameProcess)) = LCase$(NameProcess) Then
                RunningProcess = True
                Exit Function
             End If
             
             'Get the next process off the heap - Similar as before
             RProcessFound = ProcessNext(hSnapshot, uProcess)
           
           'Continue while a process has been found
           Loop While RProcessFound
           
           'Close handle to the heap
           Dim fin as Logical
           Fin = CloseHandle(hSnapshot)
        End If
End Function
